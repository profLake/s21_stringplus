#
# Если хочешь знать, как это работает, загляни в
#   https://habr.com/ru/post/155201/.
# Если этого мало, отведай https://stackoverflow.com/questions/2734719/how-to-compile-a-static-library-in-linux
#
#

SHELL := /bin/bash
CC=gcc
CFLAGS=-Wall -Wextra -Werror
LDFLAGS=
SOURCES=$(wildcard s21_*.c)
OBJECTS=$(SOURCES:.c=.o)
EXECUTABLE=

ifeq ("$(shell uname -s)", "Linux")
	CLIBS=-lm -lcheck -lsubunit -lrt -lpthread
	####...-lsubunit -lrt -lpthread -lm --- lcheck, видимо,
	####    использует эти библиотеки
else
	CLIBS=-lm -lcheck
endif


all: clean sce_check gcov_test


%.o: %.c
	$(CC) -c $(CFLAGS) $^ -o $@


s21_string.a: $(OBJECTS)
	ar -rcs $@ $^


gcov_test:
	##gcov ./tests/*.gcda
	####gcov --- выводит профилировачную инфу в консоль
	geninfo ./tests/*.gcda
	genhtml ./tests/*.info --output-directory ./tests/
	brave-browser ./tests/src/index.html


sce_check: ./tests/sce_unit_tests.c $(SOURCES)
	make -f ./sce_Makefile_ clean
	clear

	$(CC) $(CFLAGS) \
		-fprofile-arcs -ftest-coverage \
		$^ \
		-o ./tests/unit_tests.out \
		$(CLIBS)
		####...-fprofile-arcs -ftest-coverage --- это для gcov-теста
		####
	./tests/unit_tests.out; exit 0

sce_extra_check: ./tests/extra_unit_tests.c $(SOURCES)
	make -f ./sce_Makefile_ clean
	clear

	$(CC) \
		-fprofile-arcs -ftest-coverage \
		$^ \
		-o ./tests/sce_extra_unit_tests.out \
		$(CLIBS) 2> /tmp/delme
		####...-fprofile-arcs -ftest-coverage --- это для gcov-теста
		####
	./tests/sce_extra_unit_tests.out

sce_sprintf_test: ./tests/sce_sprintf_test.c $(SOURCES)
	make -f ./sce_Makefile_ clean
	clear

	$(CC) $^ -lm -o ./tests/sce_sprintf_test.out
	./tests/sce_sprintf_test.out
	

cpplint:
	cp ../materials/linters/CPPLINT.cfg ./
	python3 ../materials/linters/cpplint.py --extensions=c ./s21_*.c ./s21_*.h \
        #./tests/


valgrind:
	#valgrind ./tests/sce_extra_unit_tests.out
	valgrind \
		--show-leak-kinds=all \
		--track-origins=no \
		--log-file=RESULT_VALGRIND.txt \
		./tests/sce_extra_unit_tests.out
		#--leak-check=full --- "each individual leak will be shown in detail"
		#--show-leak-kinds=all --- Show all of "definite, indirect, possible,
		#   reachable" leak kinds in the "full" report.
		#--track-origins=yes --- Favor useful output over speed. This tracks
		#   the origins of uninitialized values, which could be very useful for
		#   memory errors. Consider turning off if Valgrind is unacceptably
		#   slow.
		#--verbose: Can tell you about unusual behavior of your program. Repeat
		#   for more verbosity.
		#--log-file: Write to a file. Useful when output exceeds terminal space.


cppcheck:
	clear
	cppcheck --enable=all --suppress=missingIncludeSystem $(SOURCES)
    

#check_old:
#	clear
#	$(CC) -Wall -Wextra -Werror \
#		-fprofile-arcs -ftest-coverage \
#		./tests/unit_tests.c \
#		./s21_strlen.c \
#		./s21_memcmp.c \
#		./s21_memcpy.c \
#		./s21_strchr.c \
#		./s21_strcpy.c \
#		./s21_strncmp.c \
#		./s21_strpbrk.c \
#		./s21_strtok.c \
#		./s21_strerror.c \
#		-o ./tests/unit_tests.out \
#		-lcheck -lsubunit -lrt -lpthread -lm \
#	./tests/unit_tests.out


clean:
	find ./ \( -iname "*.gcda" \
		-or -iname "*.gcov" \
		-or -iname "*.gcno" \
		-or -iname "*.out" \
		-or -iname "*.o" \
		-or -iname "*.a" \
		-or -iname "*.html" \
		-or -iname "*.info" \
		-or -iname "*.css" \
		-or -iname "*.png" \
		-or -iname "*.png" \
	\) -delete

	rm -rf ./tests/src/ \
		./.DS_Store \

	


